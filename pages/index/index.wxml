<!--pages/index/index.wxml-->
<view class="index">
  <swiperBox />
  <info />
  <goodNav />
  <scrollBox />
  <view>
    <text>{{obj1.name}} </text>
    <text>{{obj1.value}} </text>
    <text>{{obj1.com}}\n</text>
    <!-- wx:key中不用写{{}}可以直接写item中的某一个属性 或者直接使用*this表示本身 -->
    <!-- block不是一个组件 只是渲染元素 只是包装元素，可以组织包装结构 支持for和if 不会在页面中进行任何渲染 -->
    <block wx:for="{{arr1}}" wx:key="*this">
      <text wx:if="{{item == 1}}">{{item}}我是1 </text>
      <text wx:elif="{{item == 2}}">{{item}}我是2 </text><text wx:else="">{{item}}other{{index}}</text>
    </block>
  </view>
  <button type="primary" bindtap="onTapTest">{{text}}</button>
  <!-- data-*传递参数时会被转换为全部小写 -->
  <!-- mark:*包括次节点到根节点所有的mark数据 -->
  <button bind:tap="onTapTest" data-data="0000" data-tttt="ceshi" mark:testMark="123">测试</button>
  <view mark:fatherMark="fMark">
    <button data-testButtonData="btnData" mark:btnMark="btnMark" bind:tap="onBindTapBtnData">测试事件传参</button>
  </view>
  <!-- 在小程序中input默认没有边框需要自己添加样式 -->
  <!-- catch阻止事件冒泡 bind不阻止 -->
  <!-- model:属性="{{value}}" 双向绑定属性 不支持数据类型也就是数组和对象 -->
  <input type="text" model:value="{{value}}" catchinput="onInputTest" />
  <checkbox checked="{{false}}" />
  <checkbox checked="false" />
  <checkbox model:checked="{{check}}" />
  <button catch:tap="onClickGetData" type="primary">获取数据</button>
  <button bindtap="onClickExit">exit</button>
  <!-- 本地存储 -->
  <!-- 同步后面加Sync，异步记得加await -->
  <button bindtap="setStorage" type="primary">新增/修改</button>
  <button bindtap="getStorage" type="warn">获取</button>
  <button bindtap="removeStorage" type="default">删除</button>
  <button bindtap="clearStorage">清空</button>
  <!-- 路由与通信 -->
  <button plain bindtap="navigateTo">navigateTo</button>
  <button plain bindtap="redirectTo">redirectTo</button>
  <button plain bindtap="switchTab">switchTab</button>
  <button plain bindtap="reLauch">reLauch</button>
  <button plain bindtap="navigateBack">navigateBack</button>
  <!-- 组件 传值 -->
  <!-- 父传子属性传参子组件内properties接收 -->
  <!-- 子传父 父组件内需要添加bind自定义事件命接收 -->
  <customCheckbox label="{{label}}" position="right" bindtap="onClickCusCheckbox" bindmyEvent="CToFGetData" id="customCheckbox">
    <text slot="top">我是上面</text>
    <text slot="bottom">我是下面</text>
  </customCheckbox>
  <button bindtap="getCDOm" type="warn">获取子组件实例</button>
  <!-- 传入的样式类 -->
  <!-- 属性是在externalClasses里定义的值 -->
  <!-- 属性值要求必须是类名 -->
  <custom2 extend-class="my-class" text2="text2" />
  <!-- custom-class是van-image组件的外部样式类 未生效添加权重!important
 -->
  <van-image width="100" height="100" round custom-class="custom-class" src="https://img.yzcdn.cn/vant/cat.jpeg" bindclick="onCLickImg" use-loading-slot use-error-slot>
    <text slot="loading">加载中？！！</text>
    <text slot="error">出错了！！！！</text>
  </van-image>
  <!-- // 1、低版本需要修改van组件的样式 需要修改样式隔离styleIsolation为shared
// 2、使用文档中组件对应的外部样式类 -->
  <van-button type="default">默认按钮</van-button>
  <!-- 获取头像 -->
  <view>
    <van-image width="100" height="100" src="{{avatarUrl}}" />
    <van-button type="info" open-type="chooseAvatar" bindchooseavatar="bindchooseavatar">获取头像</van-button>
  </view>
  <!-- 获取昵称 -->
  <form bindsubmit="onSubmit">
    <!-- 如果添加了name属性，form组件submit提交时会自动收集带有name属性的表单元素的值 -->
    <!-- input的type为nickname时点击input输入框键盘上发会弹出微信昵称 -->
    <input type="nickname" name="nickname" placeholder="请输入昵称" />
    <van-button plain type="danger" form-type="submit">设置昵称</van-button>
  </form>
  <!-- 分享 -->
  <!-- 第一种方法js中设置onShareAppMessage钩子函数右上角三个点内可以分享 -->
  <!-- 分享到朋友圈 -->
  <!-- js中设置onShareTimeline钩子函数右上角三个点内可以分享到朋友圈 onShareAppMessage也必须设置-->
  <view>
    <button type="primary" open-type="share">分享</button>
  </view>
  <!-- 验证手机号 -->
  <!-- 手机号快速验证 -->
  <button open-type="getPhoneNumber" type="primary" bindgetphonenumber="getphonenumber" plain>获取手机号</button>
  <!-- 手机号实时验证 -->
  <button open-type="getRealtimePhoneNumber	" type="primary" bindgetrealtimephonenumber="getrealtimephonenumber" plain>获取手机号</button>
  <!-- 客服 -->
  <button open-type="contact">客服</button>
  <!-- 获取唯一app实例 page外使用getApp()获取到app的实例 可以获取到app.js中的变量和方法 -->
  <button type="warn" plain bind:tap="onClickGetApp">获取app</button>
  <!-- 页面间事件通信通道 eventChannel 被打开页面和打开页面之间的通讯 -->
  <button plain bind:tap="onClickEventChannelAndGoToPag">跨页面传参并跳转</button>
  <!-- pubsubjs 事件总线 只有在Component组件才生效-->
  <!--  PubSub.publish(事件名, 变量) 发射自定义事件 类似于emit -->
  <!--  PubSub.subscribe(事件名, (msg, data) => {}) 阅监听自定义事件 类似于on-->
  <button bind:tap="onClickPubSubJs">传递给子组件</button>
  <!-- 自定义导航栏在app或者page的json中设置navigationStyle为custom 就会删除默认导航样式只保留右上角胶囊 -->
  <text>mobx-miniprogram 状态管理工具</text>
  <!-- mobx-miniprogram 状态管理工具 类似于vuex pinia -->
  <!-- 在页面中使用store里面的数据和方法 -->
  <!-- ComponentWithStore替换js中的组件构造方法Component -->
  <!-- BehaviorWithStore继续使用Page或者Component构造方法在页面或组件中behaviors:[behaviorsStore]引入 -->
  <customStore />
  <text>computed 计算属性</text>
  <customComputed />
  <text>watch监听属性</text>
  <customWatch />
</view>